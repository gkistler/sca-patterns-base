##############################################################################
#  Copyright (C) 2013-2014 SUSE LLC
##############################################################################
#
#  This program is free software; you can redistribute it and/or modify
#  it under the terms of the GNU General Public License as published by
#  the Free Software Foundation; version 2 of the License.
#
#  This program is distributed in the hope that it will be useful,
#  but WITHOUT ANY WARRANTY; without even the implied warranty of
#  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#  GNU General Public License for more details.
#
#  You should have received a copy of the GNU General Public License
#  along with this program; if not, see <http://www.gnu.org/licenses/>.
#
#  Authors/Contributors:
#     Jason Record (jrecord@suse.com)
#
#  Last Modified Date: 2014 Jan 09
#
##############################################################################
# Library:       Core.rc
# Version:       0.0.2
# Requires:      (none)
# Description:   Provides global variables for pattern status, log level, and
#                pattern results. I also provide common processing functions.
#
# Function Provided:
#  printDebug LABEL [VALUE]
#  setStatus STATUS Description
#  updateStatus STATUS Description
#  processOptions "$@"
#  printPatternResults
#  getSection FILENAME SECTION [HEADER_LINES]
#  normalizeVersionString VERSION
#  compareVersions VERSION VERSION
#
# Functions Proposed:
#  getSupportconfigRunDate
#
##############################################################################

##############################################################################
# GLOBAL VARIABLES
##############################################################################

STATUS_TEMPORARY=-2
STATUS_PARTIAL=-1
STATUS_SUCCESS=0
STATUS_RECOMMEND=1
STATUS_PROMOTION=2
STATUS_WARNING=3
STATUS_CRITICAL=4
STATUS_ERROR=5
STATUS_IGNORE=$STATUS_ERROR

LOGLEVEL_QUIET=0
LOGLEVEL_MIN=1
LOGLEVEL_NORMAL=2
LOGLEVEL_VERBOSE=3
LOGLEVEL_DEBUG=10

INDEX_CLASS=0
INDEX_CATEGORY=1
INDEX_COMPONENT=2
INDEX_PATTERN_ID=3
INDEX_PRIMARY_LINK=4
INDEX_OVERALL=5
INDEX_OVERALL_INFO=6
INDEX_FIRST_LINK=7

PROPERTY_NAME_CLASS="META_CLASS"
PROPERTY_NAME_CATEGORY="META_CATEGORY"
PROPERTY_NAME_COMPONENT="META_COMPONENT"
PROPERTY_NAME_PATTERN_ID="PATTERN_ID"
PROPERTY_NAME_OVERALL="OVERALL"
PROPERTY_NAME_OVERALL_INFO="OVERALL_INFO"
PROPERTY_NAME_PRIMARY_LINK="PRIMARY_LINK"
PROPERTY_NAME_LINK_TID="META_LINK_TID"
PROPERTY_NAME_LINK_BUG="META_LINK_BUG"

CORE_ERR_ARG_MISSION=101
CORE_ERR_ARG_INVALID=102
CORE_ERR_PATH_MISSING=103
CORE_ERR_PATH_INVALID=104
CORE_ERR_FILE_MISSING=105
CORE_ERR_FILE_INVALID=106
CORE_ERR_STATUS_ERROR=107

COMPARED_LESS=0
COMPARED_EQUAL=1
COMPARED_MORE=2

ARCH_PATH=''
export OPT_LOGLEVEL=$LOGLEVEL_QUIET
export GSTATUS=$STATUS_TEMPORARY

declare -a PATTERN_RESULTS
CONTENT=''

##############################################################################
# GLOBAL FUNCTIONS
##############################################################################
# Summary
# ----------------------------------------------------------------------------
#  printDebug LABEL [VALUE]
#  setStatus STATUS Description
#  updateStatus STATUS Description
#  processOptions "$@"
#  printPatternResults
#  getSection FILENAME SECTION [HEADER_LINES]
#  normalizeVersionString VERSION
#  compareVersions VERSION VERSION


printDebug() {
	LABEL="$1"
	VALUE="$2"

	if (( OPT_LOGLEVEL >= LOGLEVEL_DEBUG ))
	then
		if [[ -n "$VALUE" ]]
		then
			printf " %-40s = %s\n" "$LABEL" "$VALUE" >&2
		else
			printf " %-40s\n" "$LABEL" >&2
		fi
	fi
}

setStatus() {
	GSTATUS=$1
	DESCRIPTION=$2
	PATTERN_RESULTS[$INDEX_OVERALL]="${PROPERTY_NAME_OVERALL}=${GSTATUS}"
	PATTERN_RESULTS[$INDEX_OVERALL_INFO]="${PROPERTY_NAME_OVERALL_INFO}=${DESCRIPTION}"
	printDebug '><setStatus' "${PATTERN_RESULTS[$INDEX_OVERALL]}: ${PATTERN_RESULTS[$INDEX_OVERALL_INFO]}"
	if (( GSTATUS >= STATUS_ERROR ))
	then
		printPatternResults
		exit $CORE_ERR_STATUS_ERR
	fi
}

updateStatus() {
	CURRENT_STATUS=$1
	DESCRIPTION=$2
	LSTATUS=$CURRENT_STATUS
	if (( GSTATUS < LSTATUS ))
	then
		GSTATUS=$LSTATUS
		PATTERN_RESULTS[$INDEX_OVERALL]="${PROPERTY_NAME_OVERALL}=${GSTATUS}"
		PATTERN_RESULTS[$INDEX_OVERALL_INFO]="${PROPERTY_NAME_OVERALL_INFO}=${DESCRIPTION}"
		printDebug '><updateStatus' "${PATTERN_RESULTS[$INDEX_OVERALL]}: ${PATTERN_RESULTS[$INDEX_OVERALL_INFO]}"
	fi
	if (( GSTATUS >= STATUS_ERROR ))
	then
		printPatternResults
		exit $CORE_ERR_STATUS_ERR
	fi
}

processOptions() {
	while getopts :dp: TMPOPT
	do
		case $TMPOPT in
			\:) echo "ERROR: Missing Argument -$OPTARG"; exit $CORE_ERR_ARG_MISSING ;;
			\?) echo "ERROR: Invalid Option -$OPTARG"; exit $CORE_ERR_ARG_INVALID ;;
			d) OPT_LOGLEVEL=$LOGLEVEL_DEBUG ;;
			p) ARCH_PATH=$OPTARG ;;
		esac
	done
	[ -z "$ARCH_PATH" ] && { echo "ERROR: Missing Archive Path, Use -p"; exit $CORE_ERR_PATH_MISSING; }
	[ -d $ARCH_PATH ] || { echo "ERROR: Invalid Archive Path, $ARCH_PATH"; exit $CORE_ERR_PATH_INVALID; }
}

printPatternResults() {
	MAX="${#PATTERN_RESULTS[@]}"
	for (( I=0; I<MAX; I++ ))
	do
		if (( I+1 == MAX ))
		then
			printf "%s" "${PATTERN_RESULTS[$I]}"
		else
			printf "%s" "${PATTERN_RESULTS[$I]}|"
		fi
	done
	echo
}

# getSection $FILENAME $SECTION_STRING [$HEADER_LINES]
# Populates the global CONTENT array with one line per element of the section
getSection() {
	local FILENAME=$1
	local ARCH_FILE="${ARCH_PATH}/$FILENAME"
	local SECTION_STRING=$2
	local HEADER_LINES=$3
	[ -z "$HEADER_LINES" ] && HEADER_LINES=0
	printDebug '> getSection' "Section '$SECTION_STRING' in '$FILENAME' skipping $HEADER_LINES lines"
	CONTENT=''
	local SECTION_NAME='INVALID SECTION NAME __8723JILAU987H34IYU98QHAFO8J3AFH838_SJAOWIEAO838OAH8E_'
	local SECTION_FOUND=0
	if [[ -s $ARCH_FILE ]]
	then
		local SECTION_BEGIN=$(grep -nA1 '#==\[' $ARCH_FILE | grep "$SECTION_STRING" | cut -d\- -f1)
		local SECTION_END=0
		if [[ -n "$SECTION_BEGIN" ]]
		then
			for I in $(grep -n '#==\[' $ARCH_FILE | cut -d\: -f1)
			do
				if (( $I > $SECTION_BEGIN ))
				then
					SECTION_END=$I
					break
				fi
			done
			printDebug '  getSection BOUNDARIES' "$SECTION_BEGIN , $SECTION_END"
			SECTION_BEGIN=$((SECTION_BEGIN+1+HEADER_LINES))
			if (( SECTION_END > 0 ))
			then
				((SECTION_END--))
				SECTION_END=",$SECTION_END"
			else
				SECTION_END=',$'
			fi
			printDebug '  getSection BOUNDARIES' "$SECTION_BEGIN $SECTION_END"

			CONTENT=$(sed -n -e "${SECTION_BEGIN}${SECTION_END}p" $ARCH_FILE)
			CONTENT_COUNT=$(echo "$CONTENT" | wc -l)
		else
			updateStatus $STATUS_PARTIAL "Error: Section '$SECTION_STRING' not found in $FILENAME"
			CONTENT_COUNT=0
		fi
	else
		updateStatus $STATUS_PARTIAL "Error: File not found - $ARCH_FILE"
		CONTENT_COUNT=0
	fi
	printDebug '< getSection ELEMENTS' "$CONTENT_COUNT"
	return $CONTENT_COUNT
}

normalizeVersionString() {
	local VERSTR=$1;
	NORMALIZED=()

	printDebug "> normalizeVersionString" "$VERSTR"
	# define version boundaries
	VERSTR=$(echo $VERSTR | sed -e 's/[-._+]/|/g')		# replace all version seperators with the bar "|" boundary character 
#	printDebug "  normalizeVersionString VERSION SEPARATORS" "$VERSTR"
	VERSTR=$(echo $VERSTR | sed -e 's/\([A-Z,a-z]\+\)/|\1|/g')	# place a boundary character between groups of letters
#	printDebug "  normalizeVersionString LETTER GROUPS" "$VERSTR"
	VERSTR=$(echo $VERSTR | sed -e 's/|0\+\([1-9]\)/|\1/g')		# strip off leading zeros in version elements
#	printDebug "  normalizeVersionString LEADING ZEROS" "$VERSTR"
	VERSTR=$(echo $VERSTR | sed -e 's/|\+/|/g')					# replace all double boundary characters with a single one
#	printDebug "  normalizeVersionString DOUBLE |" "$VERSTR"
	printDebug "  normalizeVersionString BOUNDARIES" "$VERSTR"
	VERSTR=$(echo $VERSTR | sed -e "s/|/ /g")
	for I in $VERSTR
	do
		NORMALIZED=("${NORMALIZED[@]}" "$I")	# split the version elements into an array for analysis
	done
	local ELEMENTS="${#NORMALIZED[@]}"
	printDebug "< normalizeVersionString ELEMENTS" "${ELEMENTS}"
}

compareVersions() {
	COMPARISON=$COMPARED_EQUAL
	local VERSTR_1=$1
	local VERSTR_2=$2
	local -a FIRST LAST
	printDebug '> compareVersions' "'$VERSTR_1' to '$VERSTR_2'"

	if [[ "$VERSTR_1" != "$VERSTR_2" ]]
	then
		normalizeVersionString "$VERSTR_1"
		local -a FIRST=("${NORMALIZED[@]}")
		local FIRST_CNT=${#FIRST[@]}

		normalizeVersionString "$VERSTR_2"
		local -a LAST=("${NORMALIZED[@]}")
		local LAST_CNT=${#LAST[@]}

		# use the smallest version string which represents the most significant version elements
		if (( FIRST_CNT <= LAST_CNT ))
		then
			TOTAL_ELEMENTS=$FIRST_CNT
		else
			TOTAL_ELEMENTS=$LAST_CNT
		fi
		printDebug "  compareVersions TOTAL_ELEMENTS" $TOTAL_ELEMENTS

		# compare version elements
		FSTR=''
		LSTR=''
		for (( I=0; I<TOTAL_ELEMENTS; I++ ))
		do
			if echo ${FIRST[$I]} | grep [[:alpha:]] &>/dev/null || echo ${LAST[$I]} | grep [[:alpha:]] &>/dev/null
			then
				local FSTR="${FIRST[$I]}"
				local LSTR="${LAST[$I]}"
				if [[ "$FSTR" > "$LSTR" ]]
				then
					printDebug "  compareVersions F/L Str" "$FSTR gt $LSTR"
					COMPARISON=$COMPARED_MORE
					I=$TOTAL_ELEMENTS
				elif [[ "$FSTR" < "$LSTR" ]]
				then
					printDebug "  compareVersions F/L Str" "$FSTR lt $LSTR"
					COMPARISON=$COMPARED_LESS
					I=$TOTAL_ELEMENTS
				else
					printDebug "  compareVersions F/L Str" "$FSTR eq $LSTR"
				fi
			else
				if (( ${FIRST[$I]} > ${LAST[$I]} ))
				then
					printDebug "  compareVersions F/L Num" "${FIRST[$I]} gt ${LAST[$I]}"
					COMPARISON=$COMPARED_MORE
					I=$TOTAL_ELEMENTS
				elif (( ${FIRST[$I]} < ${LAST[$I]} ))
				then
					printDebug "  compareVersions F/L Num" "${FIRST[$I]} lt ${LAST[$I]}"
					COMPARISON=$COMPARED_LESS
					I=$TOTAL_ELEMENTS
				else
					printDebug "  compareVersions F/L Num" "${FIRST[$I]} eq ${LAST[$I]}"
				fi
			fi
		done
	else
		printDebug "  compareVersions F/L" "$VERSTR_1 eq $VERSTR_2"
	fi

	printDebug '  compareVersions COMPARISON' $COMPARISON
	if (( $COMPARISON < $COMPARED_EQUAL ))
	then
		printDebug '< compareVersions RESULT' "$VERSTR_1 < $VERSTR_2"
	elif (( $COMPARISON > $COMPARED_EQUAL ))
	then
		printDebug '< compareVersions RESULT' "$VERSTR_1 > $VERSTR_2"
	else
		printDebug '< compareVersions RESULT' "$VERSTR_1 = $VERSTR_2"
	fi
	return $COMPARISON;
}


